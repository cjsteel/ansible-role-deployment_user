---
# tasks file for ansible-role-bootstrap

# do we want a specific user id / group id  ? 999:999 ?

- name: install requirements
  become: true
  yum: name=libselinux-python state=installed
  when: ansible_distribution == 'CentOS'
  tags: [ 'packages', 'shorewall' ]


- name: "Remove our deployment user when state is absent"
  user:
    name: '{{ deployment_user_username }}'
    uid      : '{{ deployment_user_uid }}'
    state    : 'absent'
    system   : True
    group    : '{{ deployment_user_home_group }}'
    groups   : '{{ deployment_user_system_groups | join(",") }}'
    append   : True
    home     : '{{ deployment_user_home }}'
    shell    : '{{ deployment_user_shell }}'
    comment  : '{{ deployment_user_comment }}'
  when: "'{{ deployment_user_state }}' == 'absent'"

- name: "Ensure deployment user account user is removed from the deployment users passwordless sudo group"
  user:
    name   : '{{ deployment_user_username }}'
    state  : 'absent'
    groups : '{{ deployment_user_sudo_group }}'
    append : True
  when: "'{{ deployment_user_sudo_group_state }}' == 'present'"

- name: Ensure specified system group(s) are present or absent.
  group:
    name  : '{{ item }}'
    gid   : '{{ deployment_user_home_gid }}'
    state : '{{ deployment_user_system_groups_state }}'
    system: True
  with_items: '{{ deployment_user_system_groups }}'
#  when: "'{{ deployment_user_state }}' == 'present'"

- name: "ensure that our deployment user exists and is a system account"
  user:
    name: '{{ deployment_user_username }}'
    uid      : '{{ deployment_user_uid }}'
    state    : '{{ deployment_user_state }}'
    system   : True
    group    : '{{ deployment_user_home_group }}'
    groups   : '{{ deployment_user_system_groups | join(",") }}'
    append   : True
    home     : '{{ deployment_user_home }}'
    shell    : '{{ deployment_user_shell }}'
    comment  : '{{ deployment_user_comment }}'
  when: "'{{ deployment_user_state }}' == 'present'"

- name: "Add or remove the deployment users public sshkey(s) to the remote users authorized_keys file."
  authorized_key:
    user  : '{{ deployment_user_username }}'
    key   : '{{ "\n".join(deployment_users_public_sshkeys) | string }}'
    state : '{{ deployment_users_public_sshkeys_state }}'
  failed_when: (deployment_users_public_sshkeys is undefined or
                (deployment_users_public_sshkeys is defined and not deployment_users_public_sshkeys))

# template our sudo users sudoers.d file and give ansible managed header

- name: delete users sudoer.d file when deployment user state is absent
  file:
    path  : '{{ item.value.dest }}'
    state : 'absent'
  with_dict: "{{ deployment_sudoers_d_files }}"
  when: "'{{ deployment_user_state }}' == 'absent'"

- name: "template any sudoer.d (group) files"
  template:
    backup: yes
    src   : '{{ ansible_distribution }}/{{ ansible_distribution_major_version }}/{{ item.value.src }}'
    dest  : '{{ item.value.dest }}'
    owner : '{{ item.value.owner }}'
    group : '{{ item.value.group }}'
    mode  : '{{ item.value.mode }}'
  with_dict: "{{ deployment_sudoers_d_files }}"
  when: "'{{ deployment_user_state }}' == 'present' and '{{ ansible_distribution }}' == 'CentOS'"

- name: "template any sudoer.d (group) files"
  template:
    backup: yes
    src   : '{{ ansible_distribution }}/{{ ansible_distribution_version }}/{{ item.value.src }}'
    dest  : '{{ item.value.dest }}'
    owner : '{{ item.value.owner }}'
    group : '{{ item.value.group }}'
    mode  : 0440
  with_dict: "{{ deployment_sudoers_d_files }}"
  when: "'{{ deployment_user_state }}' == 'present' and '{{ ansible_distribution }}' == 'Ubuntu'"

- name: Create (or remove ) specified system groups
  group:
    name  : '{{ item }}'
    gid   : '{{ deployment_user_home_gid }}'
    state : '{{ deployment_user_system_groups_state }}'
    system: True
  with_items: '{{ deployment_user_system_groups }}'
#  when: "'{{ deployment_user_system_groups_state }}' == 'present'"

- name: "Configure deployment users system group with passwordless access for sudo"
  lineinfile:
    dest     : '/etc/sudoers.d/{{ deployment_user_sudo_group }}'
    regexp   : '{{ item.regexp }}'
    line     : '{{ item.line }}'
    state    : 'present'
    create   : True
    owner    : 'root'
    group    : 'root'
    mode     : '0440'
    validate : 'visudo -cf %s'
  with_items:
    - regexp: '^Defaults: %{{ deployment_user_sudo_group }} env_check\s'
      line:    'Defaults: %{{ deployment_user_sudo_group }} env_check += "SSH_CLIENT"'
    - regexp: '^%{{ deployment_user_sudo_group }}\s'
      line:    '%{{ deployment_user_sudo_group }} ALL = (ALL:ALL) NOPASSWD: SETENV: ALL'
  when: "'{{ deployment_user_sudo_group_state }}' == 'present'"


- name: "Ensure /etc/sudoers includes /etc/sudoers.d"
  lineinfile:
    dest     : '/etc/sudoers'
    regexp   : '^#includedir\s+/etc/sudoers.d$'
    line     : '#includedir /etc/sudoers.d'
    state    : 'present'
    validate : 'visudo -cf %s'
  when: "'{{ deployment_user_sudo_group_state }}' == 'present'"

- name: "Ensure that our deployment account user is in our deployment users passwordless sudo group"
  user:
    name   : '{{ deployment_user_username }}'
    state  : 'present'
    groups : '{{ deployment_user_sudo_group }}'
    append : True
  when: "'{{ deployment_user_sudo_group_state }}' == 'present'"
  
- name: "Delete sudoers.d group file when state is set to absent"
  file:
    path   : '/etc/sudoers.d/{{ deployment_user_sudo_group }}'
    state  : 'absent'
  when: "'{{ deployment_user_sudo_group_state }}' == 'absent'"

- name: "Copy administrator users background"
  copy: src=usr_share_backgrounds_gnome_m104_01_2560x1600.jpg dest=/usr/share/backgrounds/gnome/m104_01_2560x1600.jpg owner=root group=root mode=644
  when: "'{{ deployment_user_install_admin_background }}' == true and '{{ deployment_user_state }}' == 'present'"

- name: "template any sudoer.d (group) files"
  template:
    backup: yes
    src   : 'HOME_.config_gnome-control-center_backgrounds_last-edited.xml'
    dest  : '{{ ansible.env.HOME }}/.config/gnome-control-center_backgrounds/last-edited.xml'
    owner : '{{ deployment_user_username }}'
    group : '{{ deployment_user_username }}'
    mode  : 0554
  when: "'{{ deployment_user_install_admin_background }}' == true and '{{ deployment_user_state }}' == 'present'"

- name: "Copy administrator users background"
  copy: src=usr_share_backgrounds_gnome_m104_01_2560x1600.jpg dest=/usr/share/backgrounds/gnome/m104_01_2560x1600.jpg owner=root group=root mode=644
  when: "'{{ deployment_user_install_admin_background }}' == true and '{{ deployment_user_state }}' == 'present'"

- name: "template any sudoer.d (group) files"
  template:
    backup: yes
    src   : 'HOME_.config_gnome-control-center_backgrounds_last-edited.xml'
    dest  : '{{ ansible.env.HOME }}/.config/gnome-control-center_backgrounds/last-edited.xml'
    owner : '{{ deployment_user_username }}'
    group : '{{ deployment_user_username }}'
    mode  : 0554
  when: "'{{ deployment_user_install_admin_background }}' == true and '{{ deployment_user_state }}' == 'present'"


- name: "Copy administrator users background"
  copy:
    src: 'usr_share_backgrounds_gnome_m104_01_2560x1600.jpg'
    dest: '/usr/share/backgrounds/gnome/m104_01_2560x1600.jpg'
    owner: 'root'
    group: 'root'
    mode: 644
  when: "'{{ deployment_user_install_admin_background }}' == true and '{{ deployment_user_state }}' == 'present'"

- name: "Copy last-edited.xml to '{{ ansible.env.HOME }}/.config/gnome-control-center_backgrounds/last-edited.xml"
  template:
    backup: yes
    src   : 'HOME_.config_gnome-control-center_backgrounds_last-edited.xml'
    dest  : '{{ ansible.env.HOME }}/.config/gnome-control-center_backgrounds/last-edited.xml'
    owner : '{{ deployment_user_username }}'
    group : '{{ deployment_user_username }}'
    mode  : 0554
  when: "'{{ deployment_user_install_admin_background }}' == true and '{{ deployment_user_state }}' == 'present'"

